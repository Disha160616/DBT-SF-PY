{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-03-04T06:27:18.891865Z", "invocation_id": "9570153a-4ade-4e64-b260-d0af7af85ae3", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T06:27:16.496638Z", "completed_at": "2024-03-04T06:27:18.441608Z"}, {"name": "execute", "started_at": "2024-03-04T06:27:18.442854Z", "completed_at": "2024-03-04T06:27:18.442871Z"}], "thread_id": "Thread-1", "execution_time": 2.3936383724212646, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jaffle_shop.customers", "compiled": true, "compiled_code": "import snowflake.snowpark.functions as F\n\ndef model(dbt, session):\n\n    stg_customers_df = dbt.ref('stg_customers')\n    stg_orders_df = dbt.ref('stg_orders')\n    stg_payments_df = dbt.ref('stg_payments')\n\n    customer_orders_df = (\n        stg_orders_df\n        .group_by(\"customer_id\")\n        .agg(\n            F.min(F.col(\"order_date\")).alias('first_order'),\n            F.max(F.col(\"order_date\")).alias('most_recent_order'),\n            F.count(F.col(\"order_id\")).alias('number_of_orders')\n        )\n    )\n\n    customer_payments_df = (\n        stg_payments_df\n        .join(stg_orders_df, stg_payments_df.order_id == stg_orders_df.order_id, \"left\")\n        .group_by(stg_orders_df.customer_id)\n        .agg(\n            F.sum(F.col(\"amount\")).alias('total_amount')\n        )\n    )\n\n    final_df = (\n        stg_customers_df\n        .join(customer_orders_df, stg_customers_df.customer_id == customer_orders_df.customer_id, \"left\")\n        .join(customer_payments_df, stg_customers_df.customer_id == customer_payments_df.customer_id, \"left\")\n        .select(stg_customers_df.customer_id.alias(\"customer_id\"),\n                stg_customers_df.first_name.alias(\"first_name\"),\n                stg_customers_df.last_name.alias(\"last_name\"),\n                customer_orders_df.first_order.alias(\"first_order\"),\n                customer_orders_df.most_recent_order.alias(\"most_recent_order\"),\n                customer_orders_df.number_of_orders.alias(\"number_of_orders\"),\n                customer_payments_df.total_amount.alias(\"customer_lifetime_value\")\n        )\n    )\n\n    return final_df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"stg_customers\": \"metrics.dbt_drani.stg_customers\", \"stg_orders\": \"metrics.dbt_drani.stg_orders\", \"stg_payments\": \"metrics.dbt_drani.stg_payments\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"metrics\"\n    schema = \"dbt_drani\"\n    identifier = \"customers\"\n    \n    def __repr__(self):\n        return 'metrics.dbt_drani.customers'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "relation_name": "metrics.dbt_drani.customers"}], "elapsed_time": 2.4013442993164062, "args": {"invocation_command": "dbt -A dbt_worker.app worker --loglevel=DEBUG --concurrency=2 --max-memory-per-child=500000", "indirect_selection": "empty", "strict_mode": false, "partial_parse_file_diff": true, "log_format": "json", "enable_legacy_logger": false, "quiet": false, "static_parser": true, "version_check": true, "introspect": true, "log_level": "info", "send_anonymous_usage_stats": true, "log_format_file": "json", "write_json": true, "inject_ephemeral_ctes": true, "warn_error_options": {"include": [], "exclude": []}, "profiles_dir": "/usr/src/dbt-server-shared/.dbt", "print": true, "log_level_file": "debug", "profile": "user", "exclude": [], "vars": {}, "use_colors": true, "show_resource_report": false, "which": "compile", "partial_parse": true, "macro_debugging": false, "select": ["models/customers.py"], "populate_cache": false, "use_colors_file": true, "printer_width": 80, "output": "text", "defer": false, "log_path": "/usr/src/dbt-server-shared/working_dir/b6332b7a-a572-484f-97e6-9217ce89bfa8", "project_dir": "/usr/src/develop/user-267836/environment-298757/repository-213374/jaffle_shop", "log_file_max_bytes": 0, "cache_selected_only": false, "favor_state": false}}